#include "memory.h"

#include "Project2Helper.h"

#include <stdlib.h>


void* _allocate(size_t allocation_size)
{
#if defined (_MSC_VER)
	return VirtualAlloc(0, allocation_size, MEM_RESERVE, PAGE_NOACCESS);
#else
	return mmap(nullptr, allocation_size, PROT_NONE, MAP_PRIVATE | MAP_ANON, -1, 0);
#endif
}

void* _protect(void* address, size_t allocation_size)
{
	if (address == nullptr)
		return nullptr;

#if defined (_MSC_VER)
	address = VirtualAlloc(address, allocation_size, MEM_COMMIT, PAGE_READWRITE);
#else
	int e = mprotect(address, allocation_size, PROT_READ | PROT_WRITE);
	if (e < 0)
		return nullptr;
#endif

	return address;
}

bool _deallocate(void* address, size_t size_to_deallocate)
{
#if defined (_MSC_VER)
	// Set the size parameter to 0 to resolve warnings generated by a non-zero value with the MEM_DECOMMIT flag.
	UNUSED(size_to_deallocate);
	return VirtualFree(address, 0, MEM_DECOMMIT);
#else
	int e = munmap(address, size_to_deallocate);
	return e == 0;
#endif
}

bool _release(void* address, size_t size_to_deallocate) {
#if defined (_MSC_VER)
	// Set the size parameter to 0 per Microsoft's documentation when using the MEM_RELEASE flag.
	return VirtualFree(address, 0, MEM_RELEASE);
#else
	int e = munmap(address, size_to_deallocate);
	return e == 0;
#endif
}