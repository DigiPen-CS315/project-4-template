name: CMake_Linux_Clang

on: [push]

    
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip linux]')"
    
    timeout-minutes: 5
    
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++, clang++]
    steps:
      # Cache LLVM and Clang
    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v2
      with:
        path: ~/.clang
        key: llvm-10.0
      # Install LLVM and Clang
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "10.0"
        directory: ~/.clang
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}
    
      # Checkout the repository
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      env:
        CXX: ${{ matrix.compiler }}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo -S . -Bbuild

    - name: Build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build build --config Debug

    - name: Test 0
      shell: bash
      run: ./build/HeapDebugger 0

    - name: Test 1
      shell: bash
      run: ./build/HeapDebugger 1
      
    - name: Find DebugLog.csv	
      shell: bash	
      run:  if [ -f "./DebugLog.csv" ] ; then
              echo "Found DebugLog.csv";
              cat DebugLog.csv;
            elif [ -f "./build/HeapDebugger/DebugLog.csv" ] ; then 
              echo "Found DebugLog.csv";
              cat ./build/HeapDebugger/DebugLog.csv;
            elif [ -f "./build/HeapDebugger/Debug/DebugLog.csv" ] ; then 
              echo "Found DebugLog.csv";
              cat ./build/HeapDebugger/Debug/DebugLog.csv;
            else
              	echo "Error "Did not find DebugLog.csv!";
                exit(-1);
            fi 
