name: CMake_Windows_MSVC

on: [push]


jobs:
  build-msvc:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: windows-latest
    
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip windows]')"

    timeout-minutes: 5

    steps:
      # Add MS Build  
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      # with:
        # vs-version: '[16.4]'
    
      # Checkout the repository
    - uses: actions/checkout@v2
        
    - name: Create Build Environment
      # Equivalent of mkdir 
      run: cmake -E make_directory build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      # Run CMAKE to generate make file
      run: cmake $GITHUB_WORKSPACE -G "Visual Studio 16 2019" -A x64 -S . -B build

    - name: Build
      run: cmake --build build --config Debug

    - name: Test 0
      shell: powershell
      run: .\build\Debug\HeapDebugger.exe 0

    - name: Test 1
      shell: powershell
      run: .\build\Debug\HeapDebugger.exe 1

    - name: Find DebugLog.csv
      shell: powershell
      run:  |
        if (Test-Path DebugLog.csv) {
          echo "Found DebugLog.csv";
          cat DebugLog.csv;
        }
        elseif (Test-Path .\build\Debug\DebugLog.csv) {
          echo "Found DebugLog.csv";
          cat .\build\Debug\DebugLog.csv;
        }
        else {
          echo "Error Did not find DebugLog.csv!"; 
          exit(-1);
        }
